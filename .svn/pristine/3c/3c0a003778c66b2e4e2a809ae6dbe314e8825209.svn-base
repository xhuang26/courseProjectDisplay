const FileTree = require('./FileTree');
const ProjectNode = require('./ProjectNode');
const RevisionNode = require('./RevisionNode');

const fs = require('fs'),
      util = require('util'),
      xml2js = require('xml2js');



//test files
//const LOG_FILENAME = './data/test_log.xml';
//const LIST_FILENAME = './data/test_list.xml';

//real file
const LOG_FILENAME = './data/svn_log.xml';
const LIST_FILENAME = './data/svn_list.xml';

//global variable
let rootPath = {};
let projects = {};
let revisions = {};
//functions
const  readInFile = function(filename) {
  const parser = new xml2js.Parser();
  data = fs.readFileSync(__dirname + '/'+filename);
  let res = null;
  parser.parseString(data, function (err, result) { //interesting... callback style, but not async...
    if(err){
      return console.error(err);
    }
    res = result;
    //console.log(util.inspect(result, false, null))
    //console.log('Done reading in %s', filename);
    
  });
  return res;
}

//parse files and  create projects array and file tree
function parseListFile(listFileName, projects, rootPath){
  
  const listObj = readInFile(listFileName);
  rootPath["path"] = listObj['lists']['list'][0]['$']['path'];
  entryArray = listObj['lists']['list'][0]['entry'];

  
  for(let i=0; i<entryArray.length; i++){
    let cur = entryArray[i];
    let name = cur['name'][0]; //including path info
    let nameArray = name.split('/');
    let projectName = nameArray[0];
        
    //for creating tree
    type = cur['$']['kind'];
    size = -1;
    if(type != 'dir'){
      size = cur['size'][0];
    } 
    
    //create new project
    if(projects[projectName] == null){
      version = cur['commit'][0]['$']['revision'];
      author = cur['commit'][0]['author'][0];
      date = cur['commit'][0]['date'][0];
      fileTree =new FileTree(projectName);
      projects[projectName] = new ProjectNode(name,date, version, null, fileTree); //cannot set commit message currently 
    } else {
      projects[projectName].fileTree.add(size, type, name);
    } 
  }
}
function parseLogFile(logFileName, revisions, projects){
  const logObj = readInFile(logFileName);
  const revisionArray = logObj['log']['logentry'];
  for(let i=0; i<revisionArray.length; i++){
    let cur = revisionArray[i];
    let number = cur['$']['revision'];
    let author = cur['author'][0];
    let date = cur['date'][0];
    let message = cur['msg'][0];
    let revisionNode = new RevisionNode(number, author, message, date);
    let files = cur['paths'][0]['path'];
    for(let j=0; j<files.length; j++){
      let path = files[j]['_'].split('/').slice(2).join('/'); //remove /xhuang62/ at the beginning
      revisionNode.addFile(path);
    }
    revisions[number] = revisionNode;
  }
  setSummaryInProjects(revisions, projects);
}
function setSummaryInProjects(revisions, projects){
  console.log("===========");
  for(name in projects){
    let project = projects[name];
    let version = project.version;
    let summary = revisions[version].message;
    console.log("summary:", summary)
    project.setSummary(summary);
  }
}

//get all revisions contain a specific file

function getRevisions(filePath, revisions){
  res = [];
  for(num in revisions){
    revision = revisions[num];
    if(revision.containsFile(filePath)){
      
      res.push(revision);
    }
  }
  return res;
}

module.exports={
  "parserListFile": parseListFile, 
  "parserLogFile": parseLogFile,
  "getRevisions": getRevisions
};

//call parse functions
//parseListFile(LIST_FILENAME);
//parseLogFile(LOG_FILENAME);
